:nl:nl:`&GlobalSettings`
=========================

.. nl:namelist:: GlobalSettings
    
namelist block must be present and unique.

.. nl:argument::  default_dictionary
    :type: string
    :required:

    The value of default dictionary refers to the DICTIONARY_NAME values
    in the dictionary files specified in :nl:nl:`&GlobalResource` it specifies 
    the default active dictionary.

.. nl:argument::  default_model_name
    :type: string
    :required:

    The default model name is used to

    * select the active :nl:nl:`&ModelSpecification` block;
    * select data containers in TMPL_BASE template;
    * check compatibility with some data defined in :nl:arg:`&GlobalResource location_list_additional` (e.g. kalman coefficients);
    * supplement unrecognized or missing information in input records (model
      name, model type, originating center; only when it is a registred name;
      see also :ref:`section 3.1`).
    
    Supported values:
        {'unknown', 'cosmo' [1]_, 'cosmo-1', 'cosmo-2', 'cosmo-7', 'cosmo-e',
        'cosmo-i2', 'cosmo-i7', 'cosmo-eu', 'cosmo_de', 'cosmo_de-eps',
        'cosmo_d2', 'cosmo_d2-eps', 'cosmo_ru-eps', 'cosmo-leps',
        'gme', 'ifs' [1]_, 'ifs-hres', 'ifs-ens', 'ifs-seas', 'inca-1'}
    
    .. [1] Generic names, to support multiple models in same output
    
    .. note:: :nl:arg:`&GlobalSettings default_model_name` must be a registred name (except when :nl:arg:`&RunSpecification strict_usage` is false).
    
    .. note:: :nl:arg:`&GlobalSettings default_model_name` is not used to overwrite correctly decoded values but must be compatible with these decoded values (except when decoding records collected in incore storage or when :nl:arg:`&RunSpecification strict_usage` is false). 
    
    .. note:: when a generic model name is used, only the decoded model type must be compatible with :nl:arg:`&GlobalSettings default_model_name`; otherwise, the model name, the model type and the originating center must be compatible. The former mechanism supports working with multiple models at the same type, the latter allows a stricter control of the production stream.
     
    For usage of fieldextra with an unsupported configuration of cosmo
    (i.e. the center specific coding is not implemented), setting the
    :nl:arg:`&GlobalSettings default_model_name` to 'cosmo' open all functionalities of the
    program. Note that local coding, such as EPS information, is
    interpreted according to a default COSMO implementation.

.. nl:argument::  default_product_category
    :type: string

    The default product category is used to supplement missing or unrecognized
    information and to interpret local coding in input records. This value can
    be overwritten on an input file basis by setting default_product_category
    in the :nl:nl:`&Process` block used to define the corresponding input file (see :ref:`section 4.3.1`).
    
    Supported values:
      'determinist',
      'eps_control', 'eps_member', 'eps_mean', 'eps_perturbation',
      'eps_spread'
      'eps_standard_deviation', 'eps_standard_deviation_normed',
      'eps_quantile', 'eps_quantile_difference', 
      'eps_probability', 'nbh_probability', 'stat_probability', 
      'eps_probability_refdist',
      'eps_extreme_forecast_index', 'eps_shift_of_tail_index',
      'satellite', 'radar', 
      'all'
    
    When available, the value decoded from the input record has precedence over
    the user specified value (no consistency is enforced, to supports mixing
    records with differing product categories in the same output). 
    
    It may be necessary to set this value, because some meta-information is
    sometimes missing in input records and prohibits the use of some or all 
    of fieldextra features (depending on the value of strict_usage). 

.. nl:argument::  default_out_type_

.. nl:argument::  default_out_mode_

    All default values of namelist variables ``out_type_*`` and ``out_mode_*``, as
    defined in :ref:`section 4.3.2`, can be reset.
    
    In some case, the default value is out_type dependent, this is recognized
    by ``default_out_type_n_<name>`` (default for NETCDF output) and 
    ``default_out_type_g_<name>`` (default got GRIB1 and GRIB2).



.. nl:argument::  location_to_gridpoint
    :type: string

    :format: <algorithm>

    Define the algorithm used to associate a grid point to a geographic
    location:
      
    :value 'nn':
        nearest neighbour 
    :value 'n4':
        nearest neighbour or smallest delta(h) among 4 GP
    :value 'n9':
        nearest neighbour or smallest delta(h) among 9 GP 
    :value 'sn':
        nearest gridpoints within given radius (over land: 1.415, 
        over water: 2) for the optimal distance, where distance is
        the sum of the horizontal distance in meter plus the vertical
        height difference in meter multiplied by the vertical emphasis
        factor (500). This is the COSMO standard.

    n4, n9 nd sn skip water points when possible.

    Compulsory when :nl:arg:`&GlobalResource location_list` is used.

.. nl:argument::  slice_resolution_factor 
    :type: real
    :default: 0.3

    :format: strictly positive real

    Define the resolution used to discretized the user specified slices.
    
    Slice resolution is given by :nl:arg:`&GlobalSettings slice_resolution_factor` times a
    'representative' grid resolution, the 'representative' grid resolution
    being expressed in lat/lon space when the slice follows geodesic or in 
    (i,j) space when the slice follows straight lines in grid space.  

.. nl:argument::  slice_to_gridpoint
    :type: string

    :format: <algorithm>

    Define the algorithm used to compute a field along a specified slice:

    :value 'nn':
        the slice follows the specified path, with a resolution
        which is programatically derived but can also be user
        specified (see :nl:arg:`&GlobalSettings slice_resolution_factor`),
        and, for each slice point, the field value at the nearest
        grid point is used.
    :value 'nn_on_grid':
        the slice is approximated by a path following 
        the mass points on the horizontal grid, by taking
        the grid nearest grid points to the original slice.
    
    Compulsory when :nl:arg:`&GlobalResource slice_list` is used.

.. nl:argument::  slice_upscaling_factor 
    :type: integer
    :default: 1
    
    :format: strictly positive integer

    Define a possible upscaling of the fields along the slice.
    A value of 1 means no upscaling is applied.
    Not compatible with :nl:arg:`&GlobalSettings slice_to_gridpoint` set to "nn_on_grid".
    
    The upcsaling is obtained by convoluting each field along the slice with
    a boxcar function ("rectangular" function) of size ("footprint") equal to ``0.5 * slice_upscaling_factor / slice_resolution_factor``
    (expressed in terms of discretized slice resolution)
    This roughly corresponds to keeping wave lengths :nl:arg:`&GlobalSettings slice_upscaling_factor`
    times the grid spacing upwards.

.. nl:argument::  originating_center
    :type: string
    
    according to GRIB table 0

.. nl:argument::  production_status
    :type: string

.. nl:argument::  genproc_type
    :type: string

.. nl:argument::  auxiliary_metainfo
    
    :format: <sring>[,<string> ...] (each string expressed as key=value)

    Set after the last processing iteration, before producing the output.
    Override any value extracted from input records.
    
    :value originating_center: 
        reset value of originating center (see code table 0 
        of GRIB standard).

        Possible values:
            'Moscow', 'Offenbach', 'Roma', 'Zurich', 'ARPA-SIMC',
            'COSMO', 'ECMWF'
    :value production_status:
        reset value of production status (see code table 1.3 
        of GRIB 2 standard). 

        Possible values:
            'operational', 'test_operational', 'research',
            'reanalysis', 'TIGGE_operational', 'TIGGE_test'
    :value genproc_type:
        reset value of type of generating process (see code table 4.3 
        of GRIB 2 standard). 
        
        Possible values:
            'observation', 'climatology', 'initialization',
            'analysis', 'analysis_error',
            'forecast', 'bias_corrected_forecast', 'forecast_error',
            'smoothed_forecast', 'smoothed_calibrated_forecast',
            'eps_forecast', 'eps_probability', 'neighbourhood_probability'
    :value auxiliary_metainfo:
        reset specified field meta-information; expressed as
        a list of 'key=value', where value is an integer
        and key is one of the following keyword:
        
        keys defined in GRIB standard (value is universal)
            'masterTablesVersion', 
            'hoursAfterDataCutoff', 'minutesAfterDataCutoff',
            'forecastProbabilityNumber', 'totalNumberOfForecastProbabilities', (aerosol characteristics)
            'scaleFactorOfFirstSize', 'scaledValueOfFirstSize'
            'scaleFactorOfSecondSize', 'scaledValueOfSecondSize'
            'scaleFactorOfFirstWavelength', 'scaledValueOfFirstWavelength'
            'scaleFactorOfSecondWavelength', 'scaledValueOfSecondWavelength' (chemical distribution characteristics)
            'numberOfModeOfDistribution'
            'numberOfDistributionFunctionParameters'

        keys defined in GRIB standard (value is either a standard or a local code)
            'typeOfProcessedData'                             [GRIB 2 table 1.4]
            'typeOfEnsembleForecast'                          [GRIB 2 table 4.6]
            'typeOfSizeInterval', 'typeOfWavelengthInterval'  [GRIB 2 table 4.91]

        keys defined in GRIB standard (value is a local code)
            'subCentre', 'localTablesVersion'
            'generatingProcessIdentifier',
            'backgroundGeneratingProcessIdentifier'

        local keys (value is a local code)
            'localNumberOfExperiment', 'localInformationNumber',
            'localHostIdentifier', 'localVersionNumber',
            'localCreationDateYear', 'localCreationDateMonth',
            'localCreationDateDay', 'localCreationDateHour',
            'localCreationDateMinute', 'localCreationDateSecond', 
            'localValidityDateYear', 'localValidityDateMonth',
            'localValidityDateDay', 'localValidityDateHour',
            'localValidityDateMinute', 'localValidityDateSecond',
            'localTypeOfEnsembleForecast',
            'localTypeOfEnsembleProductGeneration',
            'localTypeOfEnsemblePostprocessing',
            'localElementNumber',
            'experimentVersionNumber',
            'baseDateEPS', 'baseTimeEPS',
            'totalInitialConditions',
            'numberOfMembersInCluster',
            'numberOfRepresentativeMember'
            'marsClass', 'marsType', 'marsStream', 'suiteName'

        This information can also be set independently for each
        output (see :nl:arg:`&Process out_auxiliary_metainfo`), or, even,
        independently for each field (see :nl:arg:`&Process set_auxiliary_metainfo`
        later on).

        This feature supports, in particular, the setting of any
        supported GRIB 2 local use section.
