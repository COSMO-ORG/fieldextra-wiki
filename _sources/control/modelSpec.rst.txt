:py:mod:`&ModelSpecification`
=============================

.. py:module:: &ModelSpecification

    This namelist block must be present and can be repeated as many times
    as necessary. 

    Each set of :py:mod:`&ModelSpecification` defines common characteristics of input
    fields associated with a certain model configuration.

.. py:attribute:: model_name
    :type: <string>

    must be unique among all :py:mod:`&ModelSpecification` blocks

    Name of model related to current specifications. The active set is defined
    by setting :py:attr:`&GlobalSettings.default_model_name`. Only one set can be active
    at the same time.

.. py:attribute:: earth_axis_large
    :type: <real in [m]>
    :value: 0

.. py:attribute:: earth_axis_small
    :type: <real in [m]>
    :value: 0

    Coding of earth model in GRIB 1 is limited; in particular the earth axis can
    only take one of the value prescribed in the GRIB 1 table 7. Consequently,
    the coded values may differ from the effective values used in the associated
    model, leading to incorrect computation of some differential operators. To
    overcome this difficulty, the earth axis may be explicitely set; in case of
    a spherical earth model both values must be set to the earth radius. 
    When set and processing a GRIB 1 record, the specified values overwrite the
    information coded in the record meta-information.
    When :py:attr:`&RunSpecification.strict_usage` is true and GRIB 1 records are decoded, it is compulsory 
    to set these values.

.. py:attribute:: hydrometeor
    :type: <name of field (uppercase)>, ...  (list of strings)

    Specifies the list of hydrometeors in the concerned model; this is used in
    some operators to take into account the effect of water loading. Each field
    name refers to the active dictionary. The list must be defined when the
    variable :py:attr:`&Process.out_mode_ignore_wloading` is false.

.. py:attribute:: precip_all
    :type: <[coefficient:]name of field (uppercase)>, ...  (list of strings)

.. py:attribute:: precip_snow
    :type: <[coefficient:]name of field (uppercase)>, ...  (list of strings)

.. py:attribute:: precip_rain
    :type: <[coefficient:]name of field (uppercase)>, ...  (list of strings)

.. py:attribute:: precip_convective
    :type: <[coefficient:]name of field (uppercase)>, ...  (list of strings)

.. py:attribute:: precip_gridscale
    :type: <[coefficient:]name of field (uppercase)>, ...  (list of strings)

    The set of hydrometeors is model dependent. Furthermore, only a subset of hydrometerors
    may be available in the model output. Each one of these variables defines the linear
    combination of fields to compute the corresponding type of precipitation.
    Each field name refers to the active dictionary. The default value of coefficient,
    when missing, is 1.
    By default these lists are empty, meaning that the corresponding type of precipitation
    can not be generated by fieldextra.

.. py:attribute:: radiation_topo_corrected
    :type: <string, 'yes', 'no' or blank>
    :value: blank

    Radiation at surface can be derived on horizontal plane, or may take
    into account the slope associated with the topography. This information
    is however not available in the field meta-information and must be
    externally specified when using some radiation operators.

.. py:attribute:: passive_sfc2
    :type: <name of field (uppercase)>, ...  (list of strings)

.. py:attribute:: not_passive_sfc2
    :type: <name of field (uppercase)>, ...  (list of strings)

    Set 'passive second surface' attribute for all fields listed; the value derived
    from the active dictionary will be ignored.
    
    The 'passive second surface' attribute defines the role of the second surface
    information of all mentioned fields. If the second surface is passive, the
    coded information is only used for documenting the field, but is internally
    ignored; furthermore, the vertical coordinate coefficients may be coded as
    value of the second surface. See passiveSfc2 for additional information.

.. py:attribute:: constant_in_time
    :type: <name of field (uppercase)>, ...  (list of strings)

.. py:attribute:: not_constant_in_time
    :type: <name of field (uppercase)>, ...  (list of strings)

    Set 'constant in time' attribute for all fields listed; the value derived
    from the active dictionary will be ignored.
    
    The 'constant in time' status drives the behaviour of fieldextra by missing
    time information, and also the time slots considered when mixing constant
    and non constant fields in the same product.
    
    It may occur that some fields should be considered as constant in some context
    (e.g. Z0 as external parameter), and as time varying in some other context
    (e.g. Z0 as model output).

.. py:attribute:: vertical_coordinate_id
    :type: <integer, value refers to external look-up table>

.. py:attribute:: vertical_coordinate_uuid
    :type: <xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, x in [0-9A-Fa-f]>

.. py:attribute:: vertical_coordinate_nlev
    :type: <integer, number of surfaces (half-levels)>

.. py:attribute:: vertical_coordinate_positive
    :type: <'up' or 'down'>

.. py:attribute:: vertical_coordinate_coef
    :type: <list of real numbers>

    The vertical coordinate attributes can be specified either as ID, UUID, 
    dimension, and positive direction, for generalized height based vertical
    coordinates, or as a list of real numbers. In the latter case, the numbers
    are interpreted according to the value of model_name.
    This is used to supplement the information about the vertical coordinates
    obtained from the decoded records, when missing or unrecognized, or to
    reset the coded information when :py:attr:`&Process.set_vcoord` or :py:attr:`&ModelSpecification.vertical_coordinate_reset` 
    is true.
    
    A typical application of this feature is related to the use of generalized
    height based vertical coordinates, when these coordinates also support an
    analytic representation: by supplying values for vertical_coordinate_coef,
    both the production of standard GRIB 1 output and the derivation of the
    COSMO fields P0, HHL and HFL are possible.
    
    Another typical application of this feature is to convert a GRIB 1 file
    into a GRIB 2 file, converting at the same time the sigma or hybrid
    vertical coordinates in generalized height based vertical coordinates.
    For that, vertical_coordinate_reset must be set to true; besides the new
    definition of the vertical coordinates, the surface type of all fields
    defined on model levels will be re-set to the correct type. 

.. py:attribute:: vertical_coordinate_reset
    :type: logical
    :value: .false.

    As previously explained, the values of vertical_coordinate_* are default
    values used to supplement missing values. Hovever, it is also possible
    to unconditionaly replace the decoded values by the user specified values
    by setting ``vertical_coordinate_reset=.true.`` (field based reset is also
    possible by using set_vcoord); in this case, the information is replaced
    while collecting input fields.

.. py:attribute:: regrid_method
    :type: <default re-gridding algorithm(s)>

    Instead of replicating the definition of the re-gridding algorithm for each
    concerned input/output, it is possible to define a default value by setting 
    regrid_method in :py:mod:`&ModelSpecification` and to refer to this default value by
    setting ``in_regrid_method='default'`` in each concerned :py:mod:`&Process` block (see
    :py:attr:`&Process.in_regrid_method`).
    The values supported by :py:attr:`&ModelSpecification.regrid_method` are similar to those supported by :py:attr:`&Process.in_regrid_method`.